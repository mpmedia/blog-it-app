var Promise = require('./Promise.js');

module.exports = function (db, collectionName) {

    var collection = db.collection(collectionName);
    var defaultCallback = function (resolve, reject) {
        return function (err, result) {
            if (err) {
                reject(err);
            } else {
                resolve(result);
            }
        }
    };
    var byId = function (fn) {
        return function () {
            var args = Array.prototype.slice.apply(arguments);
            var id = args.splice(0, 1)[0];
            return fn.apply(null, Array.prototype.concat({_id: id}, args));
        }
    };

    function findOne(query, options) {
        var optionsOrDefault = options || {};
        return new Promise(function (resolve, reject) {
            collection.findOne(query, optionsOrDefault, defaultCallback(resolve, reject));
        });
    }

    function find(query, options) {

        var queryOrDefault = query || {};
        var optionsOrDefault = options || {};

        return new Promise(function (resolve, reject) {
            collection.find(queryOrDefault, optionsOrDefault).toArray(defaultCallback(resolve, reject));
        });
    }

    function insert(items, options) {
        var optionsOrDefault = options || {};
        return new Promise(function (resolve, reject) {
            collection.insert(items, optionsOrDefault, defaultCallback(resolve, reject));
        });
    }

    function remove(query, options) {
        var optionsOrDefault = options || {};
        return new Promise(function (resolve, reject) {
            collection.remove(query, optionsOrDefault, defaultCallback(resolve, reject));
        });
    }

    function save(query, options) {
        var optionsOrDefault = options || {};
        return new Promise(function (resolve, reject) {
            collection.save(query, optionsOrDefault, defaultCallback(resolve, reject));
        });
    }

    function update(selector, values, options) {
        var optionsOrDefault = options || {w: 1, multi: true};
        return new Promise(function (resolve, reject) {
            collection.update(selector, values, optionsOrDefault, defaultCallback(resolve, reject));
        });
    }

    return {
        findOne: findOne,
        findById: byId(findOne),
        find: find,
        insert: insert,
        remove: remove,
        removeById: byId(remove),
        save: save,
        update: update,
        updateById: byId(update)
    };
};
