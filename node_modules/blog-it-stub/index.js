var rsvp = require('rsvp');

function when(object, methodName) {

    var original = object || {};
    var originalMethod = object[methodName] || function () {
    };
    var deferred;
    var resolve = true;
    var returnValue;
    var rejected;
    var resolved;

    original[methodName] = function () {
        //still make the original call for spies
        originalMethod.apply(original, arguments);

        return deferred.promise;
    };


    return {
        hasBeenRejected: function () {
            return rejected === true;
        },

        hasBeenResolved: function () {
            return resolved === true;
        },

        flush: function () {
            var flushed;

            var fnName;
            if (resolve === true) {
                fnName = 'resolve';
                resolved = true;
            } else {
                fnName = 'reject';
                rejected = true;
            }

            deferred[fnName](returnValue);
            return this;
        },

        thenResolveWith: function (value) {
            deferred = rsvp.defer();
            resolve = true;
            returnValue = value;
            return this;
        },

        thenRejectWith: function (value) {
            deferred = rsvp.defer();
            resolve = false;
            returnValue = value;
            return this;
        }
    };
}

module.exports = {
    when: when
};

