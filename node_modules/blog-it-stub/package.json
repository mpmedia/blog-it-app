{
  "name": "blog-it-stub",
  "version": "0.1.0",
  "description": "a stub library to stub promises",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "rsvp": "~3.0.6"
  },
  "devDependencies": {
    "jasmine-node": "~1.14.3"
  },
  "scripts": {
    "test": "NODE_ENV=test ./node_modules/.bin/jasmine-node ./test --verbose --forceexit"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/blog-it/blog-it-stub.git"
  },
  "keywords": [
    "stub",
    "promise",
    "test",
    "blog-it"
  ],
  "author": {
    "name": "Laurent Renard"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/blog-it/blog-it-stub/issues"
  },
  "homepage": "https://github.com/blog-it/blog-it-stub",
  "readme": "blog-it-stub\n============\n\nsimple stub library used by blog-it tests\n\n## how to\n\n```javascript\ndescribe('stubbing library', function () {\n\n    it('should stub resolving promise', function (done) {\n\n        var original = {\n            test: function () {\n\n            }\n        };\n\n        //stub the service which should return promise\n        var object = stub.when(original, 'test').thenResolveWith('value');\n        var result;\n\n        original.test().then(function (val) {\n            result = val;\n            expect(result).toEqual('value');\n            expect(object.hasBeenResolved()).toBe(true);\n            expect(object.hasBeenRejected()).toBe(false);\n            done();\n        });\n\n        expect(object.hasBeenResolved()).toBe(false);\n        expect(object.hasBeenRejected()).toBe(false);\n        expect(result).not.toBeDefined();\n\n        //flush pending promise\n        object.flush();\n    });\n);\n```\n\n##API\n\n* `when(service, methodName)`: create a stub and return it\n* `thenResolveWith(resolvedValue)`: tells the stub it should resolve with resolvedValue\n* `thenRejectWith(rejectValue)`: tells the stub it should reject the promise with rejectValue\n* `flush()`: effectively resolve/reject the stub (note it is an `asynchronous operation` therefore you should put your assertion in the callback of the promise\n* `hasBeenResolved()`: tells whether the stub has been resolved\n* `hasBeenRejected()`: tells whether the stub has been rejected\n\n\n## Test\n\nrun ``npm test``\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "blog-it-stub@0.1.0",
  "_from": "blog-it-stub@~0.1.0"
}
